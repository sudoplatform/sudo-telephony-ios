//
// Copyright Â© 2020 Anonyome Labs, Inc. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

import Foundation
import SudoLogging
import SudoOperations

class ProvisionPhoneNumberUseCase {
    let numberProvider: PhoneNumberServices
    let keyManager: TelephonyKeyManager
    let identityProvider: IdentityIdProviding
    let ownershipProofProvider: OwnershipProofProviding
    let publicKeyGenerator: PublicKeyGenerating
    let logger: Logger
    var queue: PlatformOperationQueue = PlatformOperationQueue()

    internal init(numberProvider: PhoneNumberServices,
                  keyManager: TelephonyKeyManager,
                  identityProvider: IdentityIdProviding,
                  ownershipProofProvider: OwnershipProofProviding,
                  publicKeyGenerator: PublicKeyGenerating,
                  logger: Logger = .telephony)
    {
        self.numberProvider = numberProvider
        self.keyManager = keyManager
        self.identityProvider = identityProvider
        self.ownershipProofProvider = ownershipProofProvider
        self.publicKeyGenerator = publicKeyGenerator
        self.logger = logger
    }

    private var executeCompletion: ClientCompletion<PhoneNumber>?

    func execute(provisioning phoneNumber: String,
                 countryCode: String,
                 sudoId: String,
                 completion: @escaping ClientCompletion<PhoneNumber>)
    {
        executeCompletion = completion

        // Multiple ops required:
        // 1. Fetch ownership proof for the sudo id
        // 2. Get the key ring id.  This may need to be generated by a service call.
        // 3. Provision number and fetch results.

        // fetch identity id as it's required for key creation/management.
        guard let identityId = self.identityProvider.getIdentityId() else {
            completion(.failure(SudoTelephonyClientError.internalError))
            return
        }

        // Generate operations
        let ownershipProofOp = GetOwnershipProofOperation(sudoId: sudoId,
                                                          dataProvider: ownershipProofProvider,
                                                          logger: logger)

        let keyRingIdOp = GetKeyRingIdOperation(identityId: identityId,
                                                keyManager: keyManager,
                                                publicKeyCreator: publicKeyGenerator,
                                                logger: logger)

        let provisionNumberOp = ProvisionPhoneNumberOperation(phoneNumber: phoneNumber,
                                                              countryCode: countryCode,
                                                              numberProvider: numberProvider,
                                                              logger: logger)

        // Add dependencies
        provisionNumberOp.addDependency(ownershipProofOp)
        provisionNumberOp.addDependency(keyRingIdOp)

        // Observe results
        provisionNumberOp.addObserver(PlatformBlockObserver(finishHandler: self.provisionCompletion(operation:errors:)))

        // Add operations
        self.queue.addOperations([ownershipProofOp, keyRingIdOp, provisionNumberOp], waitUntilFinished: false)
    }

    // Observes completion of the provision number operation.  Using a function rather
    // then an observer instance to simplify testing.
    func provisionCompletion(operation: PlatformOperation, errors: [Error]) {
        defer { executeCompletion = nil }
        if let error = errors.first {
            executeCompletion?(.failure(error))
            return
        }

        guard let provisionedNumber = (operation as? ProvisionPhoneNumberOperation)?.resultObject else {
            executeCompletion?(.failure(SudoTelephonyClientError.internalError))
            return
        }

        executeCompletion?(.success(provisionedNumber))
    }
}
